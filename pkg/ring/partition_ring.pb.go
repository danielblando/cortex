// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partition_ring.proto

package ring

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartitionState int32

const (
	P_ACTIVE    PartitionState = 0
	P_READONLY  PartitionState = 1
	P_NON_READY PartitionState = 2
)

var PartitionState_name = map[int32]string{
	0: "P_ACTIVE",
	1: "P_READONLY",
	2: "P_NON_READY",
}

var PartitionState_value = map[string]int32{
	"P_ACTIVE":    0,
	"P_READONLY":  1,
	"P_NON_READY": 2,
}

func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_996b21b2282442fe, []int{0}
}

type PartitionRingDesc struct {
	Partitions map[string]*PartitionDesc `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PartitionRingDesc) Reset()      { *m = PartitionRingDesc{} }
func (*PartitionRingDesc) ProtoMessage() {}
func (*PartitionRingDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_996b21b2282442fe, []int{0}
}
func (m *PartitionRingDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionRingDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionRingDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionRingDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionRingDesc.Merge(m, src)
}
func (m *PartitionRingDesc) XXX_Size() int {
	return m.Size()
}
func (m *PartitionRingDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionRingDesc.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionRingDesc proto.InternalMessageInfo

func (m *PartitionRingDesc) GetPartitions() map[string]*PartitionDesc {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type PartitionDesc struct {
	State               PartitionState          `protobuf:"varint,1,opt,name=state,proto3,enum=ring.PartitionState" json:"state,omitempty"`
	Tokens              []uint32                `protobuf:"varint,2,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
	Instances           map[string]InstanceDesc `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RegisteredTimestamp int64                   `protobuf:"varint,4,opt,name=registered_timestamp,json=registeredTimestamp,proto3" json:"registered_timestamp,omitempty"`
	Timestamp           int64                   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *PartitionDesc) Reset()      { *m = PartitionDesc{} }
func (*PartitionDesc) ProtoMessage() {}
func (*PartitionDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_996b21b2282442fe, []int{1}
}
func (m *PartitionDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionDesc.Merge(m, src)
}
func (m *PartitionDesc) XXX_Size() int {
	return m.Size()
}
func (m *PartitionDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionDesc.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionDesc proto.InternalMessageInfo

func (m *PartitionDesc) GetState() PartitionState {
	if m != nil {
		return m.State
	}
	return P_ACTIVE
}

func (m *PartitionDesc) GetTokens() []uint32 {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *PartitionDesc) GetInstances() map[string]InstanceDesc {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *PartitionDesc) GetRegisteredTimestamp() int64 {
	if m != nil {
		return m.RegisteredTimestamp
	}
	return 0
}

func (m *PartitionDesc) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("ring.PartitionState", PartitionState_name, PartitionState_value)
	proto.RegisterType((*PartitionRingDesc)(nil), "ring.PartitionRingDesc")
	proto.RegisterMapType((map[string]*PartitionDesc)(nil), "ring.PartitionRingDesc.PartitionsEntry")
	proto.RegisterType((*PartitionDesc)(nil), "ring.PartitionDesc")
	proto.RegisterMapType((map[string]InstanceDesc)(nil), "ring.PartitionDesc.InstancesEntry")
}

func init() { proto.RegisterFile("partition_ring.proto", fileDescriptor_996b21b2282442fe) }

var fileDescriptor_996b21b2282442fe = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xbf, 0x6e, 0xd3, 0x40,
	0x18, 0xbf, 0xb3, 0x93, 0x8a, 0x7c, 0xa1, 0xae, 0xb9, 0x5a, 0xc8, 0xb2, 0xd0, 0x61, 0x65, 0xc1,
	0x74, 0x08, 0x22, 0x30, 0x20, 0x16, 0xd4, 0xd2, 0x80, 0x2a, 0xa1, 0xd4, 0x3a, 0x2a, 0xa4, 0x4e,
	0x96, 0x29, 0x27, 0xcb, 0x2a, 0xb1, 0x23, 0xdf, 0x81, 0x94, 0x8d, 0x47, 0xe0, 0x31, 0x18, 0x79,
	0x02, 0xe6, 0x8c, 0x19, 0x33, 0x21, 0xe2, 0x2c, 0x8c, 0x79, 0x04, 0xe4, 0x33, 0xc6, 0xd8, 0xcd,
	0xf6, 0xf9, 0xf7, 0xef, 0xbb, 0xef, 0x27, 0x83, 0x35, 0x0b, 0x33, 0x19, 0xcb, 0x38, 0x4d, 0x82,
	0x2c, 0x4e, 0xa2, 0xe1, 0x2c, 0x4b, 0x65, 0x4a, 0x3a, 0xc5, 0xec, 0x58, 0x51, 0x1a, 0xa5, 0x0a,
	0x78, 0x54, 0x4c, 0x25, 0xe7, 0x40, 0xad, 0x1b, 0x7c, 0xc7, 0x70, 0xc7, 0xaf, 0x02, 0x58, 0x9c,
	0x44, 0xa7, 0x5c, 0x5c, 0x91, 0xd7, 0x00, 0xff, 0x52, 0x85, 0x8d, 0x5d, 0xdd, 0xeb, 0x8f, 0x1e,
	0x0c, 0x95, 0xed, 0x86, 0xb8, 0x46, 0xc4, 0x38, 0x91, 0xd9, 0x9c, 0xfd, 0x67, 0x75, 0x18, 0x1c,
	0xb4, 0x68, 0x62, 0x82, 0x7e, 0xcd, 0xe7, 0x36, 0x76, 0xb1, 0xd7, 0x63, 0xc5, 0x48, 0x1e, 0x42,
	0xf7, 0x73, 0xf8, 0xf1, 0x13, 0xb7, 0x35, 0x17, 0x7b, 0xfd, 0xd1, 0x61, 0x6b, 0x51, 0xb1, 0x84,
	0x95, 0x8a, 0xe7, 0xda, 0x33, 0x3c, 0xf8, 0xa1, 0xc1, 0x7e, 0x83, 0x24, 0x47, 0xd0, 0x15, 0x32,
	0x94, 0x5c, 0x85, 0x1a, 0x23, 0xab, 0x15, 0xf0, 0xb6, 0xe0, 0x58, 0x29, 0x21, 0x77, 0x61, 0x4f,
	0xa6, 0xd7, 0x3c, 0x11, 0xb6, 0xe6, 0xea, 0xde, 0x3e, 0xfb, 0xfb, 0x45, 0x5e, 0x41, 0x2f, 0x4e,
	0x84, 0x0c, 0x93, 0x2b, 0x2e, 0x6c, 0x5d, 0x5d, 0x3c, 0xd8, 0xf1, 0x90, 0xe1, 0x59, 0x25, 0x52,
	0xd7, 0x9c, 0x74, 0x16, 0x3f, 0xef, 0x23, 0x56, 0x5b, 0xc9, 0x63, 0xb0, 0x32, 0x1e, 0xc5, 0x42,
	0xf2, 0x8c, 0x7f, 0x08, 0x64, 0x3c, 0xe5, 0x42, 0x86, 0xd3, 0x99, 0xdd, 0x71, 0xb1, 0xa7, 0xb3,
	0xc3, 0x9a, 0xbb, 0xa8, 0x28, 0x72, 0x0f, 0x7a, 0xb5, 0xae, 0xab, 0x74, 0x35, 0xe0, 0xf8, 0x60,
	0x34, 0x77, 0xee, 0x68, 0xd0, 0x6b, 0x36, 0x48, 0xca, 0x87, 0x57, 0xb6, 0x56, 0x81, 0x47, 0x2f,
	0xc0, 0x68, 0x76, 0x43, 0x6e, 0xc3, 0x2d, 0x3f, 0x38, 0x7e, 0x79, 0x71, 0xf6, 0x6e, 0x6c, 0x22,
	0x62, 0x00, 0xf8, 0x01, 0x1b, 0x1f, 0x9f, 0x9e, 0x4f, 0xde, 0x5c, 0x9a, 0x98, 0x1c, 0x40, 0xdf,
	0x0f, 0x26, 0xe7, 0x13, 0x85, 0x5d, 0x9a, 0xda, 0xc9, 0xd3, 0xe5, 0x9a, 0xa2, 0xd5, 0x9a, 0xa2,
	0xed, 0x9a, 0xe2, 0x2f, 0x39, 0xc5, 0xdf, 0x72, 0x8a, 0x17, 0x39, 0xc5, 0xcb, 0x9c, 0xe2, 0x5f,
	0x39, 0xc5, 0xbf, 0x73, 0x8a, 0xb6, 0x39, 0xc5, 0x5f, 0x37, 0x14, 0x2d, 0x37, 0x14, 0xad, 0x36,
	0x14, 0xbd, 0xdf, 0x53, 0x7f, 0xdc, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x8a, 0xeb,
	0x6b, 0xb1, 0x02, 0x00, 0x00,
}

func (x PartitionState) String() string {
	s, ok := PartitionState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PartitionRingDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionRingDesc)
	if !ok {
		that2, ok := that.(PartitionRingDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(that1.Partitions[i]) {
			return false
		}
	}
	return true
}
func (this *PartitionDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionDesc)
	if !ok {
		that2, ok := that.(PartitionDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if this.Tokens[i] != that1.Tokens[i] {
			return false
		}
	}
	if len(this.Instances) != len(that1.Instances) {
		return false
	}
	for i := range this.Instances {
		a := this.Instances[i]
		b := that1.Instances[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.RegisteredTimestamp != that1.RegisteredTimestamp {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *PartitionRingDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ring.PartitionRingDesc{")
	keysForPartitions := make([]string, 0, len(this.Partitions))
	for k, _ := range this.Partitions {
		keysForPartitions = append(keysForPartitions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPartitions)
	mapStringForPartitions := "map[string]*PartitionDesc{"
	for _, k := range keysForPartitions {
		mapStringForPartitions += fmt.Sprintf("%#v: %#v,", k, this.Partitions[k])
	}
	mapStringForPartitions += "}"
	if this.Partitions != nil {
		s = append(s, "Partitions: "+mapStringForPartitions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PartitionDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ring.PartitionDesc{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	keysForInstances := make([]string, 0, len(this.Instances))
	for k, _ := range this.Instances {
		keysForInstances = append(keysForInstances, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInstances)
	mapStringForInstances := "map[string]InstanceDesc{"
	for _, k := range keysForInstances {
		mapStringForInstances += fmt.Sprintf("%#v: %#v,", k, this.Instances[k])
	}
	mapStringForInstances += "}"
	if this.Instances != nil {
		s = append(s, "Instances: "+mapStringForInstances+",\n")
	}
	s = append(s, "RegisteredTimestamp: "+fmt.Sprintf("%#v", this.RegisteredTimestamp)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPartitionRing(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PartitionRingDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionRingDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionRingDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for k := range m.Partitions {
			v := m.Partitions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPartitionRing(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPartitionRing(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPartitionRing(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintPartitionRing(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.RegisteredTimestamp != 0 {
		i = encodeVarintPartitionRing(dAtA, i, uint64(m.RegisteredTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Instances) > 0 {
		for k := range m.Instances {
			v := m.Instances[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPartitionRing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPartitionRing(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPartitionRing(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tokens) > 0 {
		dAtA4 := make([]byte, len(m.Tokens)*10)
		var j3 int
		for _, num := range m.Tokens {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPartitionRing(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintPartitionRing(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPartitionRing(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartitionRing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartitionRingDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for k, v := range m.Partitions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPartitionRing(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPartitionRing(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPartitionRing(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PartitionDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovPartitionRing(uint64(m.State))
	}
	if len(m.Tokens) > 0 {
		l = 0
		for _, e := range m.Tokens {
			l += sovPartitionRing(uint64(e))
		}
		n += 1 + sovPartitionRing(uint64(l)) + l
	}
	if len(m.Instances) > 0 {
		for k, v := range m.Instances {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovPartitionRing(uint64(len(k))) + 1 + l + sovPartitionRing(uint64(l))
			n += mapEntrySize + 1 + sovPartitionRing(uint64(mapEntrySize))
		}
	}
	if m.RegisteredTimestamp != 0 {
		n += 1 + sovPartitionRing(uint64(m.RegisteredTimestamp))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPartitionRing(uint64(m.Timestamp))
	}
	return n
}

func sovPartitionRing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartitionRing(x uint64) (n int) {
	return sovPartitionRing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PartitionRingDesc) String() string {
	if this == nil {
		return "nil"
	}
	keysForPartitions := make([]string, 0, len(this.Partitions))
	for k, _ := range this.Partitions {
		keysForPartitions = append(keysForPartitions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPartitions)
	mapStringForPartitions := "map[string]*PartitionDesc{"
	for _, k := range keysForPartitions {
		mapStringForPartitions += fmt.Sprintf("%v: %v,", k, this.Partitions[k])
	}
	mapStringForPartitions += "}"
	s := strings.Join([]string{`&PartitionRingDesc{`,
		`Partitions:` + mapStringForPartitions + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionDesc) String() string {
	if this == nil {
		return "nil"
	}
	keysForInstances := make([]string, 0, len(this.Instances))
	for k, _ := range this.Instances {
		keysForInstances = append(keysForInstances, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInstances)
	mapStringForInstances := "map[string]InstanceDesc{"
	for _, k := range keysForInstances {
		mapStringForInstances += fmt.Sprintf("%v: %v,", k, this.Instances[k])
	}
	mapStringForInstances += "}"
	s := strings.Join([]string{`&PartitionDesc{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Tokens:` + fmt.Sprintf("%v", this.Tokens) + `,`,
		`Instances:` + mapStringForInstances + `,`,
		`RegisteredTimestamp:` + fmt.Sprintf("%v", this.RegisteredTimestamp) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPartitionRing(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PartitionRingDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionRing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionRingDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionRingDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionRing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partitions == nil {
				m.Partitions = make(map[string]*PartitionDesc)
			}
			var mapkey string
			var mapvalue *PartitionDesc
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPartitionRing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPartitionRing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPartitionRing
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPartitionRing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPartitionRing
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PartitionDesc{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPartitionRing(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Partitions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionRing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionRing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PartitionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPartitionRing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tokens = append(m.Tokens, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPartitionRing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPartitionRing
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPartitionRing
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tokens) == 0 {
					m.Tokens = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPartitionRing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tokens = append(m.Tokens, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionRing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instances == nil {
				m.Instances = make(map[string]InstanceDesc)
			}
			var mapkey string
			mapvalue := &InstanceDesc{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPartitionRing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPartitionRing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPartitionRing
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPartitionRing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPartitionRing
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InstanceDesc{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPartitionRing(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPartitionRing
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Instances[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredTimestamp", wireType)
			}
			m.RegisteredTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisteredTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionRing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPartitionRing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartitionRing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartitionRing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionRing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartitionRing
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPartitionRing
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPartitionRing
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPartitionRing(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPartitionRing
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPartitionRing = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartitionRing   = fmt.Errorf("proto: integer overflow")
)
